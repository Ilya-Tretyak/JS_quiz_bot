from aiogram import types, Router, F
from aiogram.filters.command import Command

import kb
from state import StatusTest
from questions import questions

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üéØ –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=kb.chooce_level)
    

@router.message(F.text=="üë∂–ù–æ–≤–∏—á–æ–∫")
async def send_quiz(message: types.Message):
    current_question = 0
    correct_answer = 0

    while True:
        question = questions[current_question]

        kb = []
        for option in question['answer_options']:
            kb.append([types.KeyboardButton(text=option)])
        
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(question['text'], reply_markup=keyboard)

        user_answer = None
        while user_answer not in question['answer_options']:
            user_answer = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ.")
        
        if user_answer == question['options'][question['right_answer']]:
            correct_answer += 1
        
        current_question += 1
        if current_question >= len(questions):
            await message.answer(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {correct_answer} –≤–æ–ø—Ä–æ—Å–æ–≤.")
            break
        